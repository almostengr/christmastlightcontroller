using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;

namespace Almostengr.Christmaslightshow
{
    public class LightShow
    {
        // public async Task RunLightShow()
        // {
        //     Console.WriteLine(DateTime.Now + ": Start the show!");

        //     var songs = LoadSongs();
        //     RelayControl relayControl = new RelayControl();

        //     foreach (var song in songs)
        //     {
        //         IDataFile dataFile = new DataFile(song);

        //         IShowSummary showSummary = dataFile.LoadShowSummaryFromFile();
        //         IList<IEffectSequence> effectSequence = dataFile.LoadEffectSequencesFromFile();

        //         Console.WriteLine(DateTime.Now + ": Now playing: {0}", song);
        //         DoLightsAsync(showSummary, effectSequence);
        //         PlayMusicAsync(dataFile);

        //         await Task.Delay((int)showSummary.TotalTime.TotalMilliseconds);
        //     }
        //     Console.WriteLine(DateTime.Now + ": End of show!");
        // }

        // public async Task PlayMusicAsync(IDataFile dataFile)
        // {
        //     Process ExternalProcess = new Process();
        //     ExternalProcess.StartInfo.FileName = "/usr/bin/cvlc"; // --play-and-exit --intf dummy /home/almostengineer/Desktop/untitled.mp3";
        //     ExternalProcess.StartInfo.ArgumentList.Add("--play-and-exit");
        //     ExternalProcess.StartInfo.ArgumentList.Add("--intf");
        //     ExternalProcess.StartInfo.ArgumentList.Add("dummy");
        //     ExternalProcess.StartInfo.ArgumentList.Add(dataFile.MusicFilePath); // song name
        //     ExternalProcess.Start();
        //     ExternalProcess.WaitForExit();
        // }

        // // public async Task DoLightsAsync(IShowSummary showSummary, IList<IEffectSequence> effectSequences)
        // public async Task DoLightsAsync(IShowSummary showSummary, IList<IEffectSequence> effectSequences)
        // {
        //     // int counter = 0;
        //     TimeSpan showTime = new TimeSpan(0,0,0,0,0);
        //     RelayControl relayControl = new RelayControl();

        //     while (showTime < showSummary.TotalTime)
        //     {
        //         var lightsOn = effectSequences.Where(x => x.StartTime == showTime);
        //         relayControl.TurnOnLightsAsync(lightsOn);
                
        //         var lightsOff = effectSequences.Where(x => x.EndTime == showTime);
        //         relayControl.TurnOffLightsAsync(lightsOff);

        //         showTime = showTime.Add(TimeSpan.FromMilliseconds(1));

        //         await Task.Delay(1);
        //         // Task.Delay(1);
        //     }
        // }

        // public IList<string> LoadSongs()
        // {
        //     IList<string> songs = new List<string>();
        //     // songs.Add("/home/almostengineer/christmaslightshow/xlights/showData/20thCenturyFox.csv");
        //     // songs.Add("/home/almostengineer/christmaslightshow/xlights/showData/01-ChristmasTimeIsPartyTime.csv");
        //     songs.Add("/home/pi/20thCenturyFox.csv");
        //     songs.Add("/home/pi/01-ChristmasTimeIsPartyTime.csv");
        //     return songs;
        // }

        // public void IsItShowtime()
        // {
        //     Console.WriteLine(DateTime.Now + ": Checking show time");
        //     // if (DateTime.Now.Hour >= 18 && DateTime.Now.Hour <= 22)
        //     if (true)
        //     {
        //         RunLightShow();
        //     }
        //     // else
        //     // {
        //     //     RunRadio();
        //     // }
        // }







    }
}